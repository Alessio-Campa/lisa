digraph {
	"node0" [shape="rect",color="black",label=<x = 0<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ i: [bool, float32, int32, int32[], string, typing, void]<BR/>this: [typing]<BR/>x: [int32]<BR/>[inferred: [int32], state: _|_] ]]<BR/>}} -&gt; [x]>];
	"node1" [shape="rect",color="gray",label=<==(%(i, 2), 0)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ i: [bool, float32, int32, int32[], string, typing, void]<BR/>this: [typing]<BR/>x: [int32]<BR/>[inferred: [bool], state: _|_] ]]<BR/>}} -&gt; [i % 2 == 0]>];
	"node2" [shape="rect",color="gray",label=<&gt;(i, 5)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ i: [bool, float32, int32, int32[], string, typing, void]<BR/>this: [typing]<BR/>x: [int32, string]<BR/>[inferred: [bool], state: _|_] ]]<BR/>}} -&gt; [i &gt; 5]>];
	"node3" [shape="rect",color="gray",label=<x = &quot;p&quot;<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ i: [bool, float32, int32, int32[], string, typing, void]<BR/>this: [typing]<BR/>x: [string]<BR/>[inferred: [string], state: _|_] ]]<BR/>}} -&gt; [x]>];
	"node4" [shape="rect",color="black",peripheries="2",label=<return x<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ i: [bool, float32, int32, int32[], string, typing, void]<BR/>ret_value@test6: [int32, string]<BR/>this: [typing]<BR/>x: [int32, string]<BR/>[inferred: [int32, string], state: _|_] ]]<BR/>}} -&gt; [ret_value@test6]>];
	"node5" [shape="rect",color="gray",label=<i = +(i, 1)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ i: [float32, int32]<BR/>this: [typing]<BR/>x: [string]<BR/>[inferred: [float32, int32], state: _|_] ]]<BR/>}} -&gt; [i]>];
	"node1" -> "node2" [color="blue",style="dashed"];
	"node1" -> "node4" [color="red",style="dashed"];
	"node2" -> "node3" [color="blue",style="dashed"];
	"node2" -> "node4" [color="red",style="dashed"];
	"node3" -> "node5" [color="black"];
	"node0" -> "node1" [color="black"];
	"node5" -> "node2" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
